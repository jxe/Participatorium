#!/usr/bin/ruby

def list vs
  vs.each_with_index do |v, i| puts v.to_s(i+1) end
end

def roles vs
  puts vs.map{ |v| v.to_roles }.join
end

def cards vs
  puts vs.map{ |v| v.to_cards }.join
end

def props vs
  puts vs.map{ |v| v.roles.map{ |r| r.instructions.match(/\[(.*)\]/) && $1.downcase }.compact! }.flatten.compact.uniq.join("\n")
end

class Role < Struct.new :instructions, :count, :offset
  def to_s
    str = "- #{instructions}"
    str << " (x#{count})"  unless count == 1
    str << " (#{offset}m)" unless offset == 0
    str
  end

  def to_cards(place, time)
    modifier = if offset == 0 then '' elsif offset > 0; "#{offset.abs} minutes after " else "#{offset.abs} minutes before " end
    "WHEN: #{modifier}#{time}\nWHERE: #{place}\n\n#{instructions}\n\f" * count
  end

  def to_roles(place, time)
    "#{offset} // #{instructions}\n" * count
  end
end

class Vignette < Struct.new :tags, :roles, :time, :place
  def self.load(str)
    first_line, *rest = str.split(/\n-\s+/)
    number, place, time = *first_line.split('//')
    number, *tags = *number.split(' ')
    roles = rest.map do |role_line|
      role_line.chomp!
      count = 1
      if role_line.sub!(/\(x(\d+)\)/, '') or role_line.sub!(/(\d+)x\.?\s*$/,'') or role_line.sub!(/x(\d+)\.?\s*$/,'')
        count = $1.to_i
      end
      offset = 0
      if role_line.sub!(/\(\+?(\-?\d+)m?\)/, '')
        offset = $1.to_i
      end
      Role.new(role_line, count, offset)
    end
    new(tags, roles, time, place)
  end

  def roles_str
    roles.each{ |r| r.to_s }.join("\n")
  end

  def to_s(num)
    str = "##{num} #{tags.join(' ')}"
    str << " // #{place} // #{time}" if place or time
    str << "\n#{roles_str}\n\n"
    str
  end

  def self.load_many(filename)
    File.open(filename).read.split(/^\s*$/).map{ |pp| load(pp) }.compact
  end

  def to_cards
    roles.map{ |r| r.to_cards(place, time) }.join
    # | enscript -U8 --word-wrap -f Times-Roman36 -B -p cards.ps
  end

  def to_roles
    roles.map{ |r| r.to_roles(place, time) }.join
  end
end

if __FILE__ == $0
  meth = ARGV.shift
  fn = ARGV.shift
  tags = ARGV
  vs = Vignette.load_many(fn)
  if !tags.empty?
    vs = vs.select{ |v| tags.all?{ |t| v.tags.include?(t) } }
  end
  send meth, vs
end

